import bpy
import math

# 清空場景中的所有對象
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete()

# 設置FPS和動畫長度
bpy.context.scene.render.fps = 60
bpy.context.scene.frame_end = 60 * 60 * 60 * 24  # 24小時

# 創建一個秒針平面
bpy.ops.mesh.primitive_plane_add(size=0.5, enter_editmode=False, location=(0, 0, 0))
secplane = bpy.context.object

# 創建一個長方體作為秒針
secL, secW, secH = 10, 0.3, 0.2
bpy.ops.mesh.primitive_cube_add(size=1, enter_editmode=False, location=(secL/2, 0, 0))
cube = bpy.context.object
cube.scale.x = secL
cube.scale.y = secW
cube.scale.z = secH

# 創建一個新的材質
red_material = bpy.data.materials.new(name="Red_Material")

# 設置材質的顏色和光澤
red_material.diffuse_color = (1, 0, 0, 1)  # 紅色
red_material.specular_intensity = 0.5

# 將新創建的材質分配給秒針（長方體）
cube.data.materials.append(red_material)

# 將長方體設置為空平面的子對象
cube.parent = secplane

# 在第一幀為空平面添加旋轉鍵
secplane.rotation_euler.z = 0
secplane.keyframe_insert(data_path="rotation_euler", frame=0)

# 秒針：移動到最後一幀（24小時後）
bpy.context.scene.frame_set(60 * 60 * 60 * 24)

# 更改旋轉值並在最後一幀添加旋轉鍵
secplane.rotation_euler.z = -6.28319 * 60 * 60 * 24  # 旋轉360度（2 * pi弧度）* 24小時的秒數
secplane.keyframe_insert(data_path="rotation_euler", frame=60 * 60 * 60 * 24)

# 更改插值模式為 "Linear"
fcurves = secplane.animation_data.action.fcurves
for fcurve in fcurves:
    for keyframe_point in fcurve.keyframe_points:
        keyframe_point.interpolation = 'LINEAR'

# 創建一個分針平面
bpy.ops.mesh.primitive_plane_add(size=0.5, enter_editmode=False, location=(0, 0, 0.3))
minplane = bpy.context.object

# 創建一個長方體作為分針
minL, minW, minH = 9, 0.5, 0.2
bpy.ops.mesh.primitive_cube_add(size=1, enter_editmode=False, location=(minL/2, 0, 0))
cube = bpy.context.object
cube.scale.x = minL
cube.scale.y = minW
cube.scale.z = minH

# 將長方體設置為空平面的子對象
cube.parent = minplane

# 在第一幀為空平面添加旋轉鍵
minplane.rotation_euler.z = 0
minplane.keyframe_insert(data_path="rotation_euler", frame=0)

# 分針：移動到最後一幀（24小時後）
bpy.context.scene.frame_set(60 * 60 * 60 * 24)

# 更改旋轉值並在最後一幀添加旋轉鍵
# minplane.rotation_euler.z = -6.28319 * 60 * 60  # 旋轉360度（2 * pi弧度）* 1小時的秒數
minplane.rotation_euler.z = -3.14159 * 60 * 60  # 旋轉360度（2 * pi弧度）* 1小時的秒數
minplane.keyframe_insert(data_path="rotation_euler", frame=60 * 60 * 60 * 24)

# 更改插值模式為 "Linear"
fcurves = minplane.animation_data.action.fcurves
for fcurve in fcurves:
    for keyframe_point in fcurve.keyframe_points:
        keyframe_point.interpolation = 'LINEAR'


# 創建一個時針平面
bpy.ops.mesh.primitive_plane_add(size=0.5, enter_editmode=False, location=(0, 0, 0.6))
hrplane = bpy.context.object

# 創建一個長方體作為時針
hrL, hrW, hrH = 6, 0.6, 0.2
bpy.ops.mesh.primitive_cube_add(size=1, enter_editmode=False, location=(hrL/2, 0, 0))
cube = bpy.context.object
cube.scale.x = hrL
cube.scale.y = hrW
cube.scale.z = hrH

# 將長方體設置為空平面的子對象
cube.parent = hrplane

# 在第一幀為空平面添加旋轉鍵
hrplane.rotation_euler.z = 0
hrplane.keyframe_insert(data_path="rotation_euler", frame=0)

# 時針：移動到最後一幀（24小時後）
bpy.context.scene.frame_set(60 * 60 * 60 * 24)

# 更改旋轉值並在最後一幀添加旋轉鍵
# hrplane.rotation_euler.z = -3.14159 * 60 * 60  # 旋轉360度（2 * pi弧度）* 1小時的秒數
hrplane.rotation_euler.z = -3.14159 * 60 * 5 # 旋轉360度（2 * pi弧度）* 1小時的秒數
hrplane.keyframe_insert(data_path="rotation_euler", frame=60 * 60 * 60 * 24)

# 更改插值模式為 "Linear"
fcurves = hrplane.animation_data.action.fcurves
for fcurve in fcurves:
    for keyframe_point in fcurve.keyframe_points:
        keyframe_point.interpolation = 'LINEAR'


# 創建12個長方形作為刻度
for i in range(12):
    angle = i * 30  # 每個刻度相隔30度
    angle_rad = math.radians(angle)  # 轉換為弧度
    
    # 計算刻度的位置
    x = 9 * math.cos(angle_rad)
    y = 9 * math.sin(angle_rad)
    
    # 創建長方形刻度
    bpy.ops.mesh.primitive_cube_add(size=1, enter_editmode=False, location=(x, y, 0))
    tick = bpy.context.object
    tick.scale.x = 1
    tick.scale.y = 2
    tick.scale.z = 0.2
    
    # 旋轉刻度以對齊錶面
    tick.rotation_euler.z = math.radians(90) + angle_rad  # 旋轉90度加上刻度的角度